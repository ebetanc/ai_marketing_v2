-- Create real_estate_content table (idempotent) aligned with UI and n8n usage
-- Date: 2025-08-18
-- Notes:
-- - UI expects columns: id, created_at, link_origin, link_final, owner_id
-- - UI filters by owner_id = auth.uid()
-- - n8n flow will populate link_origin first, then link_final when processed
begin;
-- Create table only if missing (fresh environments)
do $$ begin if not exists (
    select 1
    from information_schema.tables
    where table_schema = 'public'
        and table_name = 'real_estate_content'
) then create table public.real_estate_content (
    id bigint generated by default as identity primary key,
    created_at timestamptz not null default now(),
    link_origin text,
    link_final text,
    owner_id uuid not null default auth.uid()
);
end if;
end $$;
-- Ensure columns/defaults exist even if table was created previously
alter table public.real_estate_content
alter column created_at
set default now();
-- Add owner_id if it doesn't exist
do $$ begin if not exists (
    select 1
    from information_schema.columns
    where table_schema = 'public'
        and table_name = 'real_estate_content'
        and column_name = 'owner_id'
) then
alter table public.real_estate_content
add column owner_id uuid default auth.uid();
end if;
end $$;
-- Backfill null owner_id with any existing auth user (dev convenience)
do $$ begin if exists (
    select 1
    from public.real_estate_content
    where owner_id is null
)
and exists (
    select 1
    from auth.users
) then
update public.real_estate_content
set owner_id = (
        select id
        from auth.users
        limit 1
    )
where owner_id is null;
end if;
end $$;
-- Ensure not null on owner_id if no nulls remain
do $$ begin if not exists (
    select 1
    from public.real_estate_content
    where owner_id is null
) then execute 'alter table public.real_estate_content alter column owner_id set not null';
end if;
end $$;
-- FK to auth.users with ON DELETE CASCADE (and ignore if already exists)
do $$ begin begin
alter table public.real_estate_content
add constraint real_estate_content_owner_id_fkey foreign key (owner_id) references auth.users(id) on delete cascade;
exception
when duplicate_object then null;
end;
end $$;
-- Useful indexes
create index if not exists real_estate_owner_idx on public.real_estate_content(owner_id);
create index if not exists real_estate_created_at_idx on public.real_estate_content(created_at desc);
-- Enable RLS (safe to re-run)
alter table public.real_estate_content enable row level security;
-- Create owner-scoped policies only if none exist yet (avoid churn in existing envs)
do $$ begin if not exists (
    select 1
    from pg_policies
    where schemaname = 'public'
        and tablename = 'real_estate_content'
) then create policy "Real estate select own" on public.real_estate_content for
select to authenticated using (
        owner_id is not null
        and owner_id = auth.uid()
    );
create policy "Real estate insert own" on public.real_estate_content for
insert to authenticated with check (
        owner_id is not null
        and owner_id = auth.uid()
    );
create policy "Real estate update own" on public.real_estate_content for
update to authenticated using (
        owner_id is not null
        and owner_id = auth.uid()
    ) with check (
        owner_id is not null
        and owner_id = auth.uid()
    );
create policy "Real estate delete own" on public.real_estate_content for delete to authenticated using (
    owner_id is not null
    and owner_id = auth.uid()
);
end if;
end $$;
commit;
