-- Media generation backend (images & videos) in 3NF
-- Date: 2025-08-30
-- Overview:
--   media_jobs   : one row per generation request (image or video)
--   media_assets : zero or more output assets per job (normalized repeating group)
-- Design notes:
--   * 3NF: no repeating groups or transitive dependencies; derived counts excluded.
--   * Company ownership enforced via FK -> companies and RLS policies.
--   * Idempotent: uses IF NOT EXISTS / guarded ADD CONSTRAINT blocks.
-- 1) Tables ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.media_jobs (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
  type text NOT NULL,
  -- 'image' | 'video'
  status text NOT NULL DEFAULT 'queued',
  -- lifecycle status
  -- Structured prompt components (nullable where not applicable)
  prompt_subject text NOT NULL,
  prompt_action text,
  prompt_style text,
  prompt_context text,
  prompt_composition text,
  prompt_refinement text,
  -- Image specific refinements
  prompt_camera text,
  -- Video specific refinements
  prompt_ambiance text,
  prompt_audio text,
  -- Parameterization
  aspect_ratio text,
  -- (square,16:9,9:16) when provided
  num_images int,
  -- image jobs only
  duration_seconds int,
  -- video jobs only (planned / target)
  assembled_prompt text NOT NULL,
  -- final prompt string actually sent to generator
  error_message text,
  started_at timestamptz,
  completed_at timestamptz
);
CREATE TABLE IF NOT EXISTS public.media_assets (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  job_id bigint NOT NULL REFERENCES public.media_jobs(id) ON DELETE CASCADE,
  asset_index int NOT NULL,
  -- stable ordering per job
  url text NOT NULL,
  -- external or storage URL
  storage_path text,
  -- optional internal storage reference
  mime_type text,
  width int,
  height int,
  duration_seconds int,
  -- actual for video outputs
  metadata jsonb -- provider / generation details
);
-- Each constraint is added only if it does not already exist (idempotent reruns)
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_jobs_type_chk'
) THEN
ALTER TABLE public.media_jobs
ADD CONSTRAINT media_jobs_type_chk CHECK (type IN ('image', 'video'));
END IF;
END $$;
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_jobs_status_chk'
) THEN
ALTER TABLE public.media_jobs
ADD CONSTRAINT media_jobs_status_chk CHECK (
    status IN ('queued', 'processing', 'completed', 'failed')
  );
END IF;
END $$;
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_jobs_aspect_ratio_chk'
) THEN
ALTER TABLE public.media_jobs
ADD CONSTRAINT media_jobs_aspect_ratio_chk CHECK (
    aspect_ratio IS NULL
    OR aspect_ratio IN ('square', '16:9', '9:16')
  );
END IF;
END $$;
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_jobs_image_params_chk'
) THEN
ALTER TABLE public.media_jobs
ADD CONSTRAINT media_jobs_image_params_chk CHECK (
    CASE
      WHEN type = 'image' THEN (
        num_images IS NOT NULL
        AND num_images BETWEEN 1 AND 10
      )
      ELSE (
        num_images IS NULL
        OR num_images BETWEEN 1 AND 10
      )
    END
  );
END IF;
END $$;
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_jobs_video_params_chk'
) THEN
ALTER TABLE public.media_jobs
ADD CONSTRAINT media_jobs_video_params_chk CHECK (
    CASE
      WHEN type = 'video' THEN (
        duration_seconds IS NOT NULL
        AND duration_seconds BETWEEN 1 AND 120
      )
      ELSE duration_seconds IS NULL
    END
  );
END IF;
END $$;
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_assets_url_chk'
) THEN
ALTER TABLE public.media_assets
ADD CONSTRAINT media_assets_url_chk CHECK (url ~* '^https?://');
END IF;
END $$;
DO $$ BEGIN IF NOT EXISTS (
  SELECT 1
  FROM pg_constraint
  WHERE conname = 'media_assets_job_index_unq'
) THEN
ALTER TABLE public.media_assets
ADD CONSTRAINT media_assets_job_index_unq UNIQUE (job_id, asset_index);
END IF;
END $$;
-- 3) Indexes --------------------------------------------------------------
CREATE INDEX IF NOT EXISTS media_jobs_created_at_idx ON public.media_jobs (created_at DESC);
CREATE INDEX IF NOT EXISTS media_jobs_company_id_idx ON public.media_jobs (company_id);
CREATE INDEX IF NOT EXISTS media_jobs_status_idx ON public.media_jobs (status);
CREATE INDEX IF NOT EXISTS media_jobs_type_idx ON public.media_jobs (type);
CREATE INDEX IF NOT EXISTS media_assets_job_id_idx ON public.media_assets (job_id);
CREATE INDEX IF NOT EXISTS media_assets_created_at_idx ON public.media_assets (created_at DESC);
-- 4) RLS Policies --------------------------------------------------------
ALTER TABLE public.media_jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.media_assets ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Media jobs via company" ON public.media_jobs;
CREATE POLICY "Media jobs via company" ON public.media_jobs FOR ALL TO authenticated USING (
  EXISTS (
    SELECT 1
    FROM public.companies c
    WHERE c.id = media_jobs.company_id
      AND c.owner_id = auth.uid()
  )
) WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.companies c
    WHERE c.id = media_jobs.company_id
      AND c.owner_id = auth.uid()
  )
);
DROP POLICY IF EXISTS "Media assets via job->company" ON public.media_assets;
CREATE POLICY "Media assets via job->company" ON public.media_assets FOR ALL TO authenticated USING (
  EXISTS (
    SELECT 1
    FROM public.media_jobs j
      JOIN public.companies c ON c.id = j.company_id
    WHERE j.id = media_assets.job_id
      AND c.owner_id = auth.uid()
  )
) WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.media_jobs j
      JOIN public.companies c ON c.id = j.company_id
    WHERE j.id = media_assets.job_id
      AND c.owner_id = auth.uid()
  )
);
-- 5) Grants --------------------------------------------------------------
GRANT SELECT,
  INSERT,
  UPDATE,
  DELETE ON public.media_jobs TO authenticated;
GRANT SELECT,
  INSERT,
  UPDATE,
  DELETE ON public.media_assets TO authenticated;
-- End migration
