-- Normalize content into a single table with platform discriminator
-- Date: 2025-08-17
begin;

-- 1) Create unified content table
do $$ begin
    create table public.content (
        id bigint generated by default as identity primary key,
        created_at timestamptz not null default now(),
        idea_id bigint not null references public.ideas(id) on delete cascade,
        platform text not null,
        content_body text not null,
        status text not null default 'draft',
        post boolean default false
    );
exception when duplicate_table then null; end $$;

-- Ensure platform is one of the supported values
do $$ begin
    alter table public.content
        add constraint content_platform_chk
        check (platform in (
            'twitter','linkedin','newsletter','facebook','instagram','youtube','tiktok','blog'
        ));
exception when duplicate_object then null; end $$;

-- Useful indexes
create index if not exists content_created_at_idx on public.content (created_at desc);
create index if not exists content_idea_id_idx on public.content (idea_id);
create index if not exists content_platform_idx on public.content (platform);
create index if not exists content_status_idx on public.content (status);

-- 2) RLS: mirror ownership via idea -> company
alter table public.content enable row level security;

drop policy if exists "Content via idea->company" on public.content;
create policy "Content via idea->company" on public.content
for all to authenticated
using (
    pg_trigger_depth() > 0
    or exists (
        select 1
        from public.ideas i
        join public.companies c on c.id = i.company_id
        where i.id = content.idea_id
          and c.owner_id = (select auth.uid())
    )
)
with check (
    exists (
        select 1
        from public.ideas i
        join public.companies c on c.id = i.company_id
        where i.id = content.idea_id
          and c.owner_id = (select auth.uid())
    )
);

-- 3) Data migration from existing tables (if they exist)
do $$ begin
    perform 1 from information_schema.tables where table_schema='public' and table_name='twitter_content';
    if found then
        insert into public.content (created_at, idea_id, content_body, post, status, platform)
        select t.created_at, t.idea_id, coalesce(t.content_body, ''), coalesce(t.post, false),
               coalesce(t.status, case when coalesce(t.post,false) then 'approved' else 'draft' end),
               'twitter'
        from public.twitter_content t;
    end if;
end $$;

do $$ begin
    perform 1 from information_schema.tables where table_schema='public' and table_name='linkedin_content';
    if found then
        insert into public.content (created_at, idea_id, content_body, post, status, platform)
        select l.created_at, l.idea_id, coalesce(l.content_body, ''), coalesce(l.post, false),
               coalesce(l.status, case when coalesce(l.post,false) then 'approved' else 'draft' end),
               'linkedin'
        from public.linkedin_content l;
    end if;
end $$;

do $$ begin
    perform 1 from information_schema.tables where table_schema='public' and table_name='newsletter_content';
    if found then
        insert into public.content (created_at, idea_id, content_body, post, status, platform)
        select n.created_at, n.idea_id, coalesce(n.content_body, ''), coalesce(n.post, false),
               coalesce(n.status, case when coalesce(n.post,false) then 'approved' else 'draft' end),
               'newsletter'
        from public.newsletter_content n;
    end if;
end $$;

-- 4) Preserve API compatibility: rename old tables and replace with routed views
do $$ begin
    perform 1 from information_schema.tables where table_schema='public' and table_name='twitter_content';
    if found then
        alter table public.twitter_content rename to twitter_content_legacy;
    end if;
end $$;

do $$ begin
    perform 1 from information_schema.tables where table_schema='public' and table_name='linkedin_content';
    if found then
        alter table public.linkedin_content rename to linkedin_content_legacy;
    end if;
end $$;

do $$ begin
    perform 1 from information_schema.tables where table_schema='public' and table_name='newsletter_content';
    if found then
        alter table public.newsletter_content rename to newsletter_content_legacy;
    end if;
end $$;

-- Create views that expose the same shape as before
create or replace view public.twitter_content as
select id, created_at, idea_id, content_body, post, status
from public.content
where platform = 'twitter';

create or replace view public.linkedin_content as
select id, created_at, idea_id, content_body, post, status
from public.content
where platform = 'linkedin';

create or replace view public.newsletter_content as
select id, created_at, idea_id, content_body, post, status
from public.content
where platform = 'newsletter';

-- 5) Upsert rules to route inserts on views into the unified table
create or replace rule twitter_content_insert as
on insert to public.twitter_content do instead
insert into public.content (created_at, idea_id, content_body, post, status, platform)
values (
    coalesce(new.created_at, now()),
    new.idea_id,
    coalesce(new.content_body, ''),
    coalesce(new.post, false),
    coalesce(new.status, case when coalesce(new.post,false) then 'approved' else 'draft' end),
    'twitter'
)
returning id, created_at, idea_id, content_body, post, status;

create or replace rule linkedin_content_insert as
on insert to public.linkedin_content do instead
insert into public.content (created_at, idea_id, content_body, post, status, platform)
values (
    coalesce(new.created_at, now()),
    new.idea_id,
    coalesce(new.content_body, ''),
    coalesce(new.post, false),
    coalesce(new.status, case when coalesce(new.post,false) then 'approved' else 'draft' end),
    'linkedin'
)
returning id, created_at, idea_id, content_body, post, status;

create or replace rule newsletter_content_insert as
on insert to public.newsletter_content do instead
insert into public.content (created_at, idea_id, content_body, post, status, platform)
values (
    coalesce(new.created_at, now()),
    new.idea_id,
    coalesce(new.content_body, ''),
    coalesce(new.post, false),
    coalesce(new.status, case when coalesce(new.post,false) then 'approved' else 'draft' end),
    'newsletter'
)
returning id, created_at, idea_id, content_body, post, status;

-- Optional: forbid platform changes via updates on the base table
-- (view WHERE clause already prevents mismatch updates through the view)

-- 6) Grants for views so PostgREST can access them
-- Base table grants
grant select, insert, update, delete on public.content to authenticated;
-- View grants (back-compat endpoints)
grant select, insert, update, delete on public.twitter_content to authenticated;
grant select, insert, update, delete on public.linkedin_content to authenticated;
grant select, insert, update, delete on public.newsletter_content to authenticated;

commit;
